<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSX | Ivan's blog]]></title>
  <link href="http://os-tres.net/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://os-tres.net/"/>
  <updated>2012-11-05T19:52:01+01:00</updated>
  <id>http://os-tres.net/</id>
  <author>
    <name><![CDATA[Ivan Ostres]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS X and task_for_pid() mach call]]></title>
    <link href="http://os-tres.net/blog/2010/02/17/mac-os-x-and-task-for-pid-mach-call/"/>
    <updated>2010-02-17T22:07:00+01:00</updated>
    <id>http://os-tres.net/blog/2010/02/17/mac-os-x-and-task-for-pid-mach-call</id>
    <content type="html"><![CDATA[<p>If you never heard of mach system calls and specifically task_for_pid() call on Mac OS X, you can consider yourself lucky. If you want to stay that way – stop reading now! Still here? In that case let’s start with disclaimer – author of this text is not and can not be in any way responsible for damage produced or influenced by this article.</p>

<p>Prior to the Mac OS X 10.4.X (Tiger), it was completely legal for one process to control another for the purpose of influencing its execution (single stepping, resuming, stopping etc) and inspecting or modifying its memory and registers. In one of the patches for Tiger, this policy was changed so that only a process owned by root or with a “primary effective group of procmod or procview” has this privilege. In Leopard (Mac OS X 10.5), this policy was changed again (that much about consistent security policy – nice work Apple) such that an inspector process now depends on the security framework to authorize use of the task_for_pid system service which gives a process the capability to control another process.</p>

<p>To build a utility that will use task_for_pid(), you need to do the following:</p>

<pre><code>1. Create Info.plist file which will be embedded to your executable 
   file and will enable code signing 
2. Create self-signed code signing certificate using Keychain access 
3. Write your program that uses security framework to obtain rights 
   to execute task\_for_pid() 
4. Compile your program and code-sign it.
</code></pre>

<p>So let’s get started.</p>

<h3>Step 1 – Create Info.plist</h3>

<p>I used one of the standard Info.plist files I could find in Xcode and changed some particular parts as can be seen in following example:</p>

<p>File /root/BLOG/clean-octopress/octopress/source/downloads/code/task_for_pid_info_plist.xml could not be found</p>

<p>The important part is key “SecTaskAccess” with value “allowed”.</p>

<h3>Step 2 – Create self-signed code signing certificate</h3>

<p>Open your Keychain Access and do the following:</p>

<p><img class="center" src="/images/task_for_pid_key_1m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_2m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_3m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_4m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_5m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_6m.png"></p>

<p><img class="center" src="/images/task_for_pid_key_7m.png"></p>

<p>When created – this certificate will be untrusted by default – change “When using this certificate” to “Always Trust” and you should be OK and ready to go for the next step.</p>

<h3>Step 3 – Write your program</h3>

<p>I wrote a very simple program that takes PID of a process you want to investigate (ran by your UID), connects to it and writes current register values for it. Code is pretty self-explaining so I won’t go into nifty details:</p>

<p>File /root/BLOG/clean-octopress/octopress/source/downloads/code/task_for_pid_prog.c could not be found</p>

<h3>Step 4 – Compile and sign</h3>

<p>To compile the program I used following command line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc tfpexample.c -sectcreate &lt;strong>TEXT &lt;/strong>info_plist ./Info.plist -o tfpexample -framework Security - framework CoreFoundation</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To sign the code with certificate we prepared before – do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>codesign -s tfpexample ./tfpexample</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can check if everything went OK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ivan]~/hoby/debuger/blog-tfp > codesign -dvvv ./tfpexample&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Executable=/Users/ivan/hoby/debuger/blog-tfp/tfpexample
</span><span class='line'>Identifier=net.os-tres.tfpexample
</span><span class='line'>Format=Mach-O thin (i386)
</span><span class='line'>CodeDirectory v=20001 size=187 flags=0!0(none) hashes=4+2 location=embedded
</span><span class='line'>CDHash=30c98f962fc9a2b1a2f73cff55d4584bd053aa3a
</span><span class='line'>Signature size=1454
</span><span class='line'>Authority=tfpexample
</span><span class='line'>Signed Time=Feb 17, 2010 8:40:04 PM
</span><span class='line'>Info.plist entries=6
</span><span class='line'>Sealed Resources=none
</span><span class='line'>Internal requirements count=0 size=12</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This looks good – let’s test it.</p>

<h3>Step 5 – Test program</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[ivan]~/hoby/debuger/blog-tfp >
</span><span class='line'>[ivan]~/hoby/debuger/blog-tfp > ps&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>PID TTY TIME CMD
</span><span class='line'>2511 ttys000 0:00.02 -zsh
</span><span class='line'>2104 ttys001 0:00.08 -zsh&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[ivan]~/hoby/debuger/blog-tfp >
</span><span class='line'>[ivan]~/hoby/debuger/blog-tfp > ./tfpexample&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Enter pid: 2104&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Thread 2104 has 1 threads. Thread 0 state:
</span><span class='line'>EIP: 953d1562
</span><span class='line'>EAX: 4006f
</span><span class='line'>EBX: 2ad74
</span><span class='line'>ECX: bffff9cc
</span><span class='line'>EDX: 953d1562 SS: 1f&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>[ivan]~/hoby/debuger/blog-tfp ></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It works.</p>
]]></content>
  </entry>
  
</feed>
